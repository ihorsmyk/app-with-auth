{"version":3,"file":"static/js/727.db4abaa2.chunk.js","mappings":"oSAoEA,EA1DoB,WAAO,IAAD,QACxB,GAAgCA,EAAAA,EAAAA,UAAS,MAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACMC,GAAWC,EAAAA,EAAAA,MACjB,GAAqDC,EAAAA,EAAAA,YAAWC,EAAAA,GAAxDC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,aAAcC,EAAxC,EAAwCA,SAChCC,GAAWC,EAAAA,EAAAA,MAAXD,OAEFE,EAAa,mCAAG,WAAMF,GAAN,uFAElBF,GAAa,GAFK,UAGaK,EAAAA,EAAAA,IAAYH,GAHzB,OAGZI,EAHY,OAIlBb,EAAYa,GAJM,gDAMlBL,EAAS,KAAIM,SANK,yBAQlBP,GAAa,GARK,4EAAH,sDAqBnB,OATAQ,EAAAA,EAAAA,YAAU,WACRJ,EAAcF,EACf,GAAE,CAACA,KAEJM,EAAAA,EAAAA,YAAU,WACHT,GACLU,EAAAA,OAAAA,QAAA,6BAAqCV,GACtC,GAAE,CAACA,KAGF,iCACE,SAAC,KAAD,CAAMW,UAAU,UAAUC,GAAE,iBAAEjB,QAAF,IAAEA,GAAF,UAAEA,EAAUkB,aAAZ,aAAE,EAAiBC,YAAnB,QAA2B,IAAvD,UACE,SAAC,MAAD,CAAoBC,KAAK,SAG1BhB,IAAa,SAACiB,EAAA,EAAD,KAEd,iBAAKL,UAAU,OAAf,WACE,gBAAIA,UAAU,aAAd,eAAqC,OAARlB,QAAQ,IAARA,OAAA,EAAAA,EAAUwB,OAAQ,YAA/C,QACA,eAAGN,UAAU,cAAb,WACE,iBAAMA,UAAU,aAAhB,sBACS,OAARlB,QAAQ,IAARA,OAAA,EAAAA,EAAUyB,QAAS,gBAEtB,eAAGP,UAAU,gBAAb,WACE,iBAAMA,UAAU,aAAhB,wBACS,OAARlB,QAAQ,IAARA,GAAA,UAAAA,EAAU0B,eAAV,eAAmBC,OAAQ,gBAE9B,eAAGT,UAAU,cAAb,WACE,iBAAMA,UAAU,aAAhB,sBACS,OAARlB,QAAQ,IAARA,OAAA,EAAAA,EAAU4B,QAAS,gBAEtB,eAAGV,UAAU,gBAAb,WACE,iBAAMA,UAAU,aAAhB,wBACS,OAARlB,QAAQ,IAARA,GAAA,UAAAA,EAAU6B,eAAV,eAAmBL,OAAQ,oBAKrC,C,iKChEKM,E,QAAqBC,EAAAA,OAAa,CACtCC,QAAS,0CAGEC,EAAQ,mCAAG,sGACCH,EAAmBI,IAAI,SADxB,uBACdC,EADc,EACdA,KADc,kBAEfA,GAFe,2CAAH,qDAKRC,EAAW,mCAAG,WAAMC,GAAN,yFACFP,EAAmBI,IAAnB,gBAAgCG,IAD9B,uBACjBF,EADiB,EACjBA,KADiB,kBAElBA,GAFkB,2CAAH,sDAKXG,EAAQ,mCAAG,sGACCR,EAAmBI,IAAI,SADxB,uBACdC,EADc,EACdA,KADc,kBAEfA,GAFe,2CAAH,qDAKRtB,EAAW,mCAAG,WAAMwB,GAAN,yFACFP,EAAmBI,IAAnB,gBAAgCG,IAD9B,uBACjBF,EADiB,EACjBA,KADiB,kBAElBA,GAFkB,2CAAH,qD","sources":["pages/UserDetails/UserDetails.jsx","services/API.js"],"sourcesContent":["import { useState, useEffect, useContext } from 'react';\nimport { useParams, Link, useLocation } from 'react-router-dom';\nimport { Notify } from 'notiflix';\nimport { TiArrowBackOutline } from 'react-icons/ti';\nimport { getUserInfo } from 'services/API';\nimport { Context } from '../../context';\nimport Loader from 'components/Loader/Loader';\n\nimport './UserDetails.scss';\n\nconst UserDetails = () => {\n  const [userInfo, setUserInfo] = useState(null);\n  const location = useLocation();\n  const { isLoading, error, setIsLoading, setError } = useContext(Context);\n  const { userId } = useParams();\n\n  const fetchUserInfo = async userId => {\n    try {\n      setIsLoading(true);\n      const receivedUserInfo = await getUserInfo(userId);\n      setUserInfo(receivedUserInfo);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchUserInfo(userId);\n  }, [userId]);\n\n  useEffect(() => {\n    if (!error) return;\n    Notify.failure(`some error occured ${error}`);\n  }, [error]);\n\n  return (\n    <>\n      <Link className=\"go-back\" to={location?.state?.from ?? '/'}>\n        <TiArrowBackOutline size=\"60\" />\n      </Link>\n\n      {isLoading && <Loader />}\n\n      <div className=\"user\">\n        <h2 className=\"user__name\"> {userInfo?.name || 'not known'} </h2>\n        <p className=\"user__email\">\n          <span className=\"user__hint\">email: </span>\n          {userInfo?.email || 'not known'}\n        </p>\n        <p className=\"user__address\">\n          <span className=\"user__hint\">address: </span>\n          {userInfo?.address?.city || 'not known'}\n        </p>\n        <p className=\"user__phone\">\n          <span className=\"user__hint\">phone: </span>\n          {userInfo?.phone || 'not known'}\n        </p>\n        <p className=\"user__company\">\n          <span className=\"user__hint\">company: </span>\n          {userInfo?.company?.name || 'not known'}\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default UserDetails;\n","import axios from 'axios';\n\nconst jsonplaceholderAPI = axios.create({\n  baseURL: 'https://jsonplaceholder.typicode.com/',\n});\n\nexport const getPosts = async () => {\n  const { data } = await jsonplaceholderAPI.get('posts');\n  return data;\n};\n\nexport const getPostInfo = async id => {\n  const { data } = await jsonplaceholderAPI.get(`posts/${id}`);\n  return data;\n};\n\nexport const getUsers = async () => {\n  const { data } = await jsonplaceholderAPI.get('users');\n  return data;\n};\n\nexport const getUserInfo = async id => {\n  const { data } = await jsonplaceholderAPI.get(`users/${id}`);\n  return data;\n};\n"],"names":["useState","userInfo","setUserInfo","location","useLocation","useContext","Context","isLoading","error","setIsLoading","setError","userId","useParams","fetchUserInfo","getUserInfo","receivedUserInfo","message","useEffect","Notify","className","to","state","from","size","Loader","name","email","address","city","phone","company","jsonplaceholderAPI","axios","baseURL","getPosts","get","data","getPostInfo","id","getUsers"],"sourceRoot":""}